"""Calc_VM.py

Simple utility functions for PADS library.
B. Yazici Sep 2023
"""
import DFS
import PartialCube
import copy
from StrongConnectivity import StronglyConnectedComponents
import sympy
from sympy import *
from itertools import combinations

#calculates number of vertices in graph
def NumOfVert(G):
    return len(G)

#calculates number of equivalence classes in graph
def AmtEquiClassPC(G):
    ver_dict_ec = PartialCube.PartialCubeEdgeLabeling(G)
    coll_ec = set()
    for ver1 in ver_dict_ec:
        for ver2 in ver_dict_ec[ver1]:
            ec = ver_dict_ec[ver1][ver2]
            coll_ec.add(Arrange2EleTuple(ec))

    return(len(coll_ec))

def EquiClassPCReps(G):
    ver_dict_ec = PartialCube.PartialCubeEdgeECs(G)
    return set(ver_dict_ec.keys())

#prints for each vertex to which equivalence classes it is linked
def VerWithVerEC(G):
    ver_dict_ec = PartialCube.PartialCubeEdgeLabeling(G)
    coll_ec = set()
    for ver1 in ver_dict_ec:
        for ver2 in ver_dict_ec[ver1]:
            ec = ver_dict_ec[ver1][ver2]
            print(ver1,Arrange2EleTuple(ec))

#returns for every vertex to which "side" of equivalence class it is linked e.g. linked to (a,b) or (b,a)
def VerWithEC_unarr(G):
    ver_dict_ec = PartialCube.PartialCubeEdgeLabeling(G)
    dict_ec = {}
    coll_ec = set()
    for ver1 in ver_dict_ec:
        coll_ec = set()
        for ver2 in ver_dict_ec[ver1]:
            ec = ver_dict_ec[ver1][ver2]
            coll_ec.add(ec)
        dict_ec[ver1]=coll_ec 
    return dict_ec

#returns for each vertex the equivalence class irrespective of side
def VerWithEC(G):
    ver_dict_ec = PartialCube.PartialCubeEdgeLabeling(G)
    dict_ec = {}
    coll_ec = set()
    for ver1 in ver_dict_ec:
        coll_ec = set()
        for ver2 in ver_dict_ec[ver1]:
            ec = ver_dict_ec[ver1][ver2]
            coll_ec.add(Arrange2EleTuple(ec))
        dict_ec[ver1]=coll_ec         
    return dict_ec          

#returns for (a,b) a tuple (a,b) if a>b else (b,a) 
def Arrange2EleTuple(tup):
    if tup[0] > tup[1]:
        return (tup[1],tup[0])
    else:
        return tup

#returns a set of equivalence classes an arranges them, no distinction between (a,b) or (b,a)
def CreateSetECArr(set_EC):
    set_a_EC = set()
    for ec in set_EC:
        set_a_EC.add(Arrange2EleTuple(ec))
    return set_a_EC

#returns a dictionary where each equivalence class is linked to x1,x2....
def CreateEcVarDict(coll_ec):
    i = 1
    dict_ec ={}
    for ec in coll_ec:
        dict_ec[ec] = var_dict[i]
        i = i + 1
    return dict_ec

#returns a graph G whose "edge" is removed
def removeEdgeGraph(G,edge):
    G_new = copy.deepcopy(G)
    G_new[edge[1]].remove(edge[0])
    G_new[edge[0]].remove(edge[1])
    return G_new

#checks if Graph G is connected
def isConnectedGraph(G):
    L = list(StronglyConnectedComponents(G))
    if len(L) != 1:
        return False
    else:
        return True

#returns all the edges from Graph G
def getEdgesGraph(G):
    edges = set()
    for ver in G:
        for g in G[ver]:
            edges.add(Arrange2EleTuple((ver,g)))
    return edges

#checks for the vertices v and w if they are still connected after all the edges from the equivalence class are removed
def getVMcell(G,v,w,ecsEdges,ecDict):
    vmc = ""
    for ec in ecsEdges:
        G_new = copy.deepcopy(G)
        for edge in ecsEdges[ec]:
            G_new = removeEdgeGraph(G_new,edge)
        if not DFS.reachable(G_new,v,w):
            if vmc == "":
                vmc =  ecDict[ec]
            else:
                vmc = vmc * ecDict[ec]
    return vmc
#returns a square matrix of nov x nov
def sqrMat(nov):
    
    lst = [1]*nov
    M = Matrix([lst])
    
    for i in range(0,nov-1):
        M=M.row_insert(1,Matrix([lst]))
    return M  

#returns the Varchenko Matrix for Graph G
def buildVarMat(G):
    ecs = EquiClassPCReps(G)
    ecDict = CreateEcVarDict(ecs)
    ecsEdges = PartialCube.PartialCubeEdgeECs(G)

    nov = NumOfVert(G)
    M = sqrMat(nov)

    for i in range(0,nov):
        for j in range(0,i):
            z = getVMcell(G,i,j,ecsEdges,ecDict)
            M[(i)*nov+j]=z
            M[(j)*nov+i]=z
        
    return M

#saves Matrix in local directory as comma separated txt file
def saveMatrix(M):
    n = shape(M)[1]
    i = 1
    with open('VarchenkoMatrix.txt', 'w') as f:
        for line in M:
            if i % n != 0:
                inp = str(line) + str(",")
                f.write(inp)
            else:
                inp = str(line) + str("\n")
                f.write(inp)            
            i = i+1

#function arranges edges (a,b) to (b,a) if b>a so that edges belonging to ec (a,b) and (b,a) are put within the class (a,b)
def arrangeDictionary(inp_dict):
    out_dict = {}

    for t in inp_dict:
        if Arrange2EleTuple(t) not in out_dict:
            out_dict[Arrange2EleTuple(t)]=inp_dict[t]
        else:
            out_dict[Arrange2EleTuple(t)]=out_dict[Arrange2EleTuple(t)].union(inp_dict[t])
    return out_dict




#Start: Directory of global parameters/variables-----------------------------------------------

x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50 = sympy.symbols('x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50')

var_dict = {1:x1,2:x2,3:x3,4:x4,5:x5,6:x6,7:x7,8:x8,9:x9,10:x10,11:x11,12:x12,13:x13,14:x14,15:x15,16:x16,17:x17,18:x18,19:x19,20:x20,21:x21,22:x22,23:x23,24:x14,25:x25,26:x26,27:x27,28:x28,29:x29,30:x30,31:x31,32:x32,33:x13,34:x34,35:x35,36:x36,37:x37,38:x38,39:x39,40:x20,41:x41,42:x42,43:x43,44:x44,45:x45,46:x46,47:x47,48:x48,49:x49,50:x50}

#End: Directory of global parameters/variables------------------------------------------------

print("----------------------Start----------------------")

G = {0:[1,2,4],1:[0,3,5],2:[0,3],3:[1,2,6],4:[0,5],5:[4,1,6],6:[5,3]}
#G = {0:[1,2,4],1:[0,3,5],2:[0,3],3:[1,2,6],4:[0,5],5:[4,1,6],6:[5,3,7],7:[6]}
#G = {0:[2,3],1:[3,4],2:[0],3:[0,1],4:[1]}

#G = {0:[1,5,6],1:[0,2],2:[1,3,7],3:[2,4],4:[3,5,8],5:[0,4],6:[0,9],7:[2,9],8:[4,9],9:[6,7,8]}
#G = {0:[1,5],1:[0,2],2:[1,3],3:[2,4,6,10],4:[3,5,7],5:[0,4],6:[3,7,9],7:[4,6,8],8:[7,9],9:[6,8,10],10:[3,9]}
#G = {0:[1,2,4,6] ,1:[0,3,5] ,2:[0,3,7] ,3:[1,2,8] ,4:[0,5,9] ,5:[1,4,10] ,6:[0,7,9] ,7:[2,6,8,11] ,8:[3,7,12] ,9:[4,6,10,11] ,10:[5,9,12] ,11:[7,9,12] ,12:[8,10,11] }

#G = {0:[1,2,4,7] ,1:[0,3,5] ,2:[0,3,8] ,3:[1,2,6,9] ,4:[0,5,10] ,5:[1,4,6,11] ,6:[3,5,13] ,7:[0,8,10] ,8:[2,7,9,12] ,9:[3,8,13] ,10:[4,7,11,12] ,11:[5,10,13] ,12:[8,10,13],13:[6,9,11,12] }
#G = {0:[4,5,6] ,1:[4,5,7] ,2:[4,6,7] ,3:[5,6,7] ,4:[0,1,2] ,5:[0,1,3] ,6:[0,2,3] ,7:[1,2,3]}
#G = {0:[1,2] ,1:[0,3] ,2:[0,4] ,3:[1,5] ,4:[2,5,6] ,5:[3,4,7] ,6:[4,7] ,7:[5,6]}

#G = {0:[1,2,4,7] ,1:[0,3,8] ,2:[0,3,5] ,3:[1,2,6] ,4:[0,10] ,5:[2,6,7,9] ,6:[3,5,8] ,7:[0,5,8,10] ,8:[1,6,7,11] ,9:[5,10], 10:[4,7,9,11],11:[8,10] }
#G = {0:[1,4] ,1:[0,2,5] ,2:[1,3,6] ,3:[2,7] ,4:[0,5,8] ,5:[1,4,6] ,6:[2,5,7] ,7:[3,6,9] ,8:[4,9] ,9:[7,8] }
#G = {0:[1,2,5] ,1:[0,3,7] ,2:[0,3,4] ,3:[1,2,6,8] ,4:[2,5,8,9] ,5:[0,4,11] ,6:[3,7,10] ,7:[1,6,12] ,8:[3,4,10] ,9:[4,10,11] ,10:[6,8,9,12] ,11:[5,9,12] ,12:[7,10,11] }

#G ={0:[1],1:[0]}    



if not PartialCube.isPartialCube(G):
    print("G is not a partial cube")
else:
    print("G is a partial cube")
    print("G has the following equivalence classes with representative elements xi")
    ecs = EquiClassPCReps(G)
    print(CreateEcVarDict(ecs))
    print("G has the following equivalence classes including the class members:")
    print(PartialCube.PartialCubeEdgeECs(G))
    print("The Varchenko matrix VM of G is given by:")
    M = buildVarMat(G)
    sympy.pretty_print(M)
    saveMatrix(M)
    print("VM was saved as VarchenkoMatrix.txt")
    
    #print("Die Determinante von VM in Summenform lautet:")
    #print(sympy.det(M))
    #print("Die Determinante von VM in Faktorform lautet:")
    #print(sympy.factor(sympy.det(M)))

print("----------------------End----------------------")
